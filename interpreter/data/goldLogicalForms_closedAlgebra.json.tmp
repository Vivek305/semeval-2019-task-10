[{"id": 10493, "logicalForm": ["(assert (Strategy \"CheckUnsatisfiable\"))", "(assert (= (Average (Elements a b c)) p))", "(assert (Not (= ?_id_17_21 (Average (Elements a b c d)))))", "(assert (MenuItem \"A\" (/ (+ (* 3 p) d) 4)))", "(assert (MenuItem \"B\" (/ (+ (* 3 p) d) 3)))", "(assert (MenuItem \"C\" (/ (+ p d) 4)))", "(assert (MenuItem \"D\" (/ (+ p d) 2)))", "(assert (MenuItem \"E\" (/ (* 3 (+ p d)) 4)))"]}, {"id": 10494, "logicalForm": ["(assert (Strategy \"CheckUnsatisfiable\"))", "(assert (Not (= ?_id_0_4 0.00326691)))", "(assert (MenuItem \"A\" (* 3.26691 (Pow 10 (- 0 3)))))", "(assert (MenuItem \"B\" (* 3.26691 (Pow 10 (- 0 2)))))", "(assert (MenuItem \"C\" (* 3.26691 (Pow 10 (- 0 1)))))", "(assert (MenuItem \"D\" (* 32.6691 (Pow 10 (- 0 2)))))", "(assert (MenuItem \"E\" (* 32.6691 (Pow 10 (- 0 3)))))"]}, {"id": 10495, "logicalForm": ["(assert (Strategy \"DirectSolution\"))", "(assert (= (Pow 27 (- r 1)) (Pow 9 r)))", "(assert (= r ?_id_0))"]}, {"id": 10497, "logicalForm": ["(assert (Strategy \"CheckUnsatisfiable\"))", "(assert (Not (= ?_id_0_5 (- (* 2 (Sum (Elements (* 2 a) (* 5 b)))) (- b (* 3 a))))))", "(assert (MenuItem \"A\" (- (- 0 (* 9 b)) (* 7 a))))", "(assert (MenuItem \"B\" (- (- 0 (* 4 b)) a)))", "(assert (MenuItem \"C\" (+ (* 4 b) a)))", "(assert (MenuItem \"D\" (+ (* 7 b) (* 3 a))))", "(assert (MenuItem \"E\" (+ (* 9 b) (* 7 a))))"]}, {"id": 10502, "logicalForm": ["(assert (Strategy \"CheckUnsatisfiable\"))", "(assert (GreaterThan x 0))", "(assert (Not (= (* (Pow 4 x) (Pow 8 x)) ?_id_0)))", "(assert (MenuItem \"A\" (Pow 2 (* 9 x))))", "(assert (MenuItem \"B\" (Pow 2 (* 8 x))))", "(assert (MenuItem \"C\" (Pow 2 (* 6 x))))", "(assert (MenuItem \"D\" (Pow 2 (* 5 x))))", "(assert (MenuItem \"E\" (Pow 2 (* 4 x))))"]}, {"id": 10506, "logicalForm": ["(assert (Strategy \"CheckUnsatisfiable\"))", "(assert (= (Pow (- a b) 2) (Pow (+ a b) 2)))", "(assert (= ab (* a b)))", "(assert (Not (True ?_id_17_21)))", "(assert (MenuItem \"A\" (= a 0)))", "(assert (MenuItem \"B\" (< b 0)))", "(assert (MenuItem \"C\" (= a b)))", "(assert (MenuItem \"D\" (= ab 0)))", "(assert (MenuItem \"E\" (= (+ a b) 0)))"]}, {"id": 10507, "logicalForm": ["(assert (Strategy \"CheckUnsatisfiable\"))", "(assert (Divides _gen7 42))", "(assert (IsPrototype _gen7 _id_5_10))", "(assert (Not (= ?_id_0_1 (Sum _id_5_10))))", "(assert (Positive _gen7))", "(assert (Prime _gen7))", "(assert (MenuItem \"A\" 3))", "(assert (MenuItem \"B\" 6))", "(assert (MenuItem \"C\" 12))", "(assert (MenuItem \"D\" 13))", "(assert (MenuItem \"E\" 76))"]}, {"id": 10508, "logicalForm": ["(assert (Strategy \"CheckUnsatisfiable\"))", "(assert (= (Pow a 3) 4))", "(assert (Not (= ?_id_7_8 (Pow a 6))))", "(assert (MenuItem \"A\" 8))", "(assert (MenuItem \"B\" 10))", "(assert (MenuItem \"C\" 12))", "(assert (MenuItem \"D\" 16))", "(assert (MenuItem \"E\" 64))"]}, {"id": 10516, "logicalForm": ["(assert (Strategy \"CheckSatisfiable\"))", "(assert (= (Sum _id_4_15) 51))", "(assert (= ?_id_18_19 x))", "(assert (BetweenIncl _gen8 (- 0 15) x))", "(assert (Consecutive \"integer\" _id_4_15))", "(assert (IsInteger _gen8))", "(assert (IsPrototype _gen8 _id_4_15))", "(assert (MenuItem \"A\" 15))", "(assert (MenuItem \"B\" 16))", "(assert (MenuItem \"C\" 18))", "(assert (MenuItem \"D\" 53))", "(assert (MenuItem \"E\" 66))"]}, {"id": 10526, "logicalForm": ["(assert (Strategy \"CheckUnsatisfiable\"))", "(assert (DivisibleBy r 12))", "(assert (DivisibleBy r 18))", "(assert (Not (And (Positive ?_id_11_15) (Divides ?_id_11_15 r))))", "(assert (Positive r))", "(assert (MenuItem \"A\" 8))", "(assert (MenuItem \"B\" 24))", "(assert (MenuItem \"C\" 27))", "(assert (MenuItem \"D\" 30))", "(assert (MenuItem \"E\" 36))"]}]